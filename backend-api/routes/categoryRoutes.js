const express = require('express');
const router = express.Router();
const Category = require('../models/Category');
const adminOnlyMiddleware = require('../middleware/adminOnlyMiddleware');

// Protect all routes in this file
router.use(adminOnlyMiddleware);

// GET /api/admin/categories - Get all categories
router.get('/', async (req, res, next) => {
  try {
    const categories = await Category.find({}).sort({ 'name.en': 1 });
    res.json(categories);
  } catch (error) {
    next(error);
  }
});

// GET /api/admin/categories/:id - Get a single category by ID
router.get('/:id', async (req, res, next) => {
  try {
    const category = await Category.findById(req.params.id);
    if (!category) {
      return res.status(404).json({ message: 'Category not found' });
    }
    res.json(category);
  } catch (error) {
    next(error);
  }
});

// POST /api/admin/categories - Create a new category
router.post('/', async (req, res, next) => {
  try {
    const { name, parentCategory, image } = req.body;
    if (!name || !Array.isArray(name) || name.length === 0) {
      return res.status(400).json({ message: 'Category name data is missing or malformed.' });
    }
    const englishName = name.find(n => n.lang === 'en');
    if (!englishName || !englishName.value || englishName.value.trim() === '') {
      return res.status(400).json({ message: 'Category name (English) is required.' });
    }

    // Slug is now auto-generated by the model, no need to pass it in req.body
    const newCategory = new Category({ name, parentCategory, image });
    await newCategory.save();
    res.status(201).json(newCategory);
  } catch (error) {
    if (error.code === 11000) {
      const field = Object.keys(error.keyValue)[0];
      const specificError = new Error(`A category with this ${field} already exists.`);
      specificError.statusCode = 409;
      return next(specificError);
    }
    next(error);
  }
});

// PUT /api/admin/categories/:id - Update a category
router.put('/:id', async (req, res, next) => {
  try {
    const { id } = req.params;
    const { name, slug, parentCategory, image } = req.body; // Slug is needed for updates

    if (!name || !Array.isArray(name) || name.length === 0) {
      return res.status(400).json({ message: 'Category name data is missing or malformed.' });
    }
    const englishName = name.find(n => n.lang === 'en');
    if (!englishName || !englishName.value || englishName.value.trim() === '') {
      return res.status(400).json({ message: 'Category name (English) is required.' });
    }
    if (!slug) {
      return res.status(400).json({ message: 'Slug is required for updates.' });
    }

    const updatedCategory = await Category.findByIdAndUpdate(
      id,
      { name, slug, parentCategory, image },
      { new: true, runValidators: true }
    );
    if (!updatedCategory) {
      return res.status(404).json({ message: 'Category not found' });
    }
    res.json(updatedCategory);
  } catch (error) {
    if (error.code === 11000) {
      const field = Object.keys(error.keyValue)[0];
      const specificError = new Error(`A category with this ${field} already exists.`);
      specificError.statusCode = 409;
      return next(specificError);
    }
    next(error);
  }
});

// DELETE /api/admin/categories/:id - Delete a category
router.delete('/:id', async (req, res, next) => {
  try {
    const { id } = req.params;
    const deletedCategory = await Category.findByIdAndDelete(id);
    if (!deletedCategory) {
      return res.status(404).json({ message: 'Category not found' });
    }
    res.json({ message: 'Category deleted successfully' });
  } catch (error) {
    next(error);
  }
});

module.exports = router;
